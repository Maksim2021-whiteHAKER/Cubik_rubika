import { applyColorTheme, scrambleCube, solveCube } from "./cube.js";
import { getControlMode, updateProgressBar } from "./index.js";
import { applyTextures } from "./texturing.js";

// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const mainMenu = document.getElementById('mainMenu');
const helpModal = document.getElementById('helpModal');
const settingsModal = document.getElementById('settingsModal');
const creatorModal = document.getElementById('creatorModal');
const resetButton = document.getElementById('resetBtn');
const backToMenuButton = document.getElementById('BackToMenuBtn');
const acceptStyleButton = document.getElementById('accept_style');
export const congratsModal = document.getElementById('congratsModal');
const pauseMenu = document.createElement('div');
const blurMenu = document.createElement('div');
const music = document.getElementById('background_music');
const musicBtn = document.getElementById('sound_setting');
const selector_theme = document.getElementById('theme-select');
const selector_color_theme = document.getElementById('color-theme-select')
blurMenu.id = 'blurmenu';
pauseMenu.id = 'pause-menu';
pauseMenu.innerHTML = `
    <h2 id="pause">–ü–∞—É–∑–∞</h2>
    <button id="resumeBtn" class="resume">–í–µ—Ä–Ω—É—Ç—å—Å—è</button>
    <button id="resetAndExitBtn" class="resetAndExit">–°–±—Ä–æ—Å–∏—Ç—å –∏ –≤—ã–π—Ç–∏</button>`;
const helpTempletes = {
    control_arrows: `
    <li>–∑–∞–∂–∞—Ç—å –ü–ö–ú –∏ –Ω–∞–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω–æ –Ω–∞ —Å—Ç—Ä–µ–ª–∫–∏ - –ø–æ–≤–æ—Ä–æ—Ç –≥—Ä–∞–Ω–∏ (–æ–±—Ä–∏—Ç–∞ –≤—ã–∫–ª)</li>
    <li>–∑–∞–∂–∞—Ç—å –ü–ö–ú –∏ –Ω–∞–≤–µ—Å—Ç–∏ –Ω–∞ —à–∞—Ä - –ø–æ–≤–æ—Ä–æ—Ç –ø–µ—Ä–µ–¥–Ω–µ–π –≥—Ä–∞–Ω–∏ (–æ—Ä–±–∏—Ç–∞ –≤—ã–∫–ª)</li>
    <li>–°—Ç—Ä–µ–ª–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ - —ç—Ç–æ –ø–æ–≤–æ—Ä–æ—Ç –∫—É–±–∏–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é</li>`,
    control_mouse_move: `
     <li>–∑–∞–∂–∞—Ç—å –ü–ö–ú –∏ –¥–≤–∏–≥–∞—Ç—å –º—ã—à—å - –≤—Ä–∞—â–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è</li>
     <li>–¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –ø–æ –æ—Å–∏ X/Y - –ø–æ–≤–æ—Ä–æ—Ç –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏/–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏</li>
     <li id='dls'>üïπüî¥–æ–¥–Ω–∞–∫–æ –Ω–∞ –≥—Ä–∞–Ω–∏ —Å–≤–µ—Ä—Ö—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤–≤–µ—Ä—Ö = –Ω–∏–∑, –Ω–∏–∑ = –≤–≤–µ—Ä—Ö.</li>
    `
}

updateHelpContent();
export let exitMenu = false;
let sounds = {
    PAUSED: 0,
    ONLY_MUSIC: 1,
    ONLY_SOUND: 2,
    BOTH_ON: 3
};
const sound_pic = {
    PAUSED: '../textures/volume_mute.png',
    ONLY_MUSIC: '../textures/volume_only_music.png',
    ONLY_SOUND: '../textures/volume_only_sound.png',
    BOTH_ON: '../textures/volume_both.png'
}
musicBtn.style.backgroundImage = `url(${sound_pic.BOTH_ON})`
export let state_sounds = sounds.BOTH_ON;

document.body.appendChild(blurMenu)
document.body.appendChild(pauseMenu)

// –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–µ–Ω—é —Å–∫—Ä—ã—Ç–æ
blurMenu.style.display = 'none';
pauseMenu.style.display = 'none';

export let gameState = {
    active: false,
    mode: null,
    startTime: 0,
    solved: false // –§–ª–∞–≥, —á—Ç–æ –∫—É–±–∏–∫ —Å–æ–±—Ä–∞–Ω

}
export let timerInterval;
export let pausedDuration = 0; // –æ–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—É–∑
let pauseStart = 0; // –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π –ø–∞—É–∑—ã

function updateCursorMode(){
    if (getControlMode() === 'control_mouse_move'){
        document.body.classList.add('control-mouse-move');
    } else {
        document.body.classList.remove('control-mouse-move');
        document.body.classList.remove('gragging');
    }
}

export function updateHelpContent(){
    const controlMode = getControlMode();
    const list = document.getElementById('cube-control-list')
    const title = document.getElementById('cube-control-title')
    title.textContent = controlMode === 'control_mouse_move'
        ? 'üïπ–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É–±–∏–∫–æ–º (–º—ã—à—å)üïπ' 
        : 'üïπ–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É–±–∏–∫–æ–º (—Å—Ç—Ä–µ–ª–∫–∏)üïπ';
    list.innerHTML = helpTempletes[controlMode] || helpTempletes[control_arrows];
}

function updateSliderValue(rangeId, labelId){
    const range = document.getElementById(rangeId);
    const label = document.getElementById(labelId);

    range.addEventListener('input', function(){
        const volume = this.value / 100;
        if (rangeId === 'music_range'){
            music.volume = volume;
            
        }        
        label.textContent = this.value + '%'
    })
}

updateSliderValue('music_range', 'prog_music')
updateSliderValue('sound_range', 'prog_sound')

function resetGame() {
    if (gameState.active) {
        console.log("–°–±—Ä–æ—Å –∏–≥—Ä—ã");
        stopTimer();
        updateProgressBar(0);
        gameState.active = false;
        gameState.solved = false;

        // –û—á–∏—â–∞–µ–º —Å—Ç—Ä–µ–ª–∫–∏
        const arrows = document.querySelectorAll('.arrow');
        arrows.forEach(arrow => arrow.remove());

        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫—É–±–∏–∫ —Å–Ω–æ–≤–∞
        setTimeout(() => {
            scrambleCube(20);
            gameState.active = true;
            startGameTimer();
        }, 300);
    }
}

// –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function goToMainMenu() {
    console.log("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

    stopTimer();
    updateProgressBar(0);
    gameState.active = false;
    gameState.mode = null;
    exitMenu = false;

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    document.querySelectorAll('.modal').forEach(m => m.style.display = 'none');
    mainMenu.style.display = 'flex';

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É–±–∏–∫–∞
    congratsModal.style.display = 'none';
    blurMenu.style.display = 'none';
}

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª–∫–∞–º–∏
function showModal(modal){
    if (modal){
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤–æ–π
        document.querySelectorAll('.modal').forEach(m => m.style.display = 'none');
        modal.style.display = 'block';       
    }
}

function hideModals() {
    document.querySelectorAll(['.modal','.modal_set']).forEach(m => m.style.display = 'none');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
document.getElementById('normalMode').addEventListener('click', () => {
    gameState.active = true
    gameState.mode = 'normal';
    gameState.solved = false
    mainMenu.style.display = 'none';
    startGameTimer();
    scrambleCube(20);
});

document.getElementById('freeMode').addEventListener('click', () => {
    gameState.active = true
    gameState.mode = 'free';
    mainMenu.style.display = 'none';
    startGameTimer();
});

// document.getElementById('trainingMode').addEventListener('click', ()=> {
//     alert('üõ†–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µüõ†')
// })

// –ö–Ω–æ–ø–∫–∞ "–°–±—Ä–æ—Å"
if (resetButton) {
    resetButton.addEventListener('click', () => {
        if (confirm("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ?")) {
            gameState.active = true;
            congratsModal.style.display = 'none';
            resetGame();
        }
    });
}

// –ö–Ω–æ–ø–∫–∞ "–í –º–µ–Ω—é"
if (backToMenuButton) {
    backToMenuButton.addEventListener('click', () => {
        goToMainMenu();
    });
}

if (selector_color_theme){
    selector_color_theme.addEventListener('change', ()=> {
        const selectedTheme = selector_color_theme.value;       
        try {
            applyColorTheme(selectedTheme);
            console.log(`–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ "${selectedTheme}" –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é.`);
        } catch (error){
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π —Ç–µ–º—ã: ", error)
        }
    })
} else {
    console.warn('–≠–ª–µ–º–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–æ–≤–æ–π —Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM.');
    // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –∏–ª–∏ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ HTML
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ü–æ–º–æ—â—å" –∏ "–°–æ–∑–¥–∞—Ç–µ–ª—å"
document.getElementById('helpBtn').addEventListener('click', () => showModal(helpModal));
document.getElementById('creatorBtn').addEventListener('click', () => showModal(creatorModal));
document.getElementById('settingsBtn').addEventListener('click', () => showModal(settingsModal));
document.getElementById('sound_setting').addEventListener('click', () => {
    state_sounds = (state_sounds + 1) % 4;
    switch(state_sounds){
        case sounds.PAUSED:
            musicBtn.style.backgroundImage = `url(${sound_pic.PAUSED})`;
            music.pause();
            break;
        case sounds.ONLY_MUSIC:
            musicBtn.style.backgroundImage = `url(${sound_pic.ONLY_MUSIC})`;
            music.play().catch(e => console.error('–û—à–∏–±–∫–∞ –≤–æ–∏—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ', e));
            break;
        case sounds.ONLY_SOUND:
            musicBtn.style.backgroundImage = `url(${sound_pic.ONLY_SOUND})`;
            music.pause();           
            break;           
        case sounds.BOTH_ON:
            musicBtn.style.backgroundImage = `url(${sound_pic.BOTH_ON})`;
            music.play().catch(e => console.error('–û—à–∏–±–∫–∞ –≤–æ–∏—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ', e));
            break;
    }
})

selector_theme.addEventListener('change', async () => {
    const theme = selector_theme.value;
    try {
        await applyTextures(theme, selector_theme, selector_color_theme);
        console.log(`–¢–µ–∫—Å—Ç—É—Ä—ã "${theme}" —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç—É—Ä:', error);
    }
});

acceptStyleButton.addEventListener('click', async () => {
    const theme = selector_theme.value;
    try {
        await applyTextures(theme);
        alert(`–¢–µ–º–∞ "${theme}" –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç—É—Ä:', error);
    }
});

document.getElementById('theme-select_2').addEventListener('change', () => {
    updateCursorMode()
    updateHelpContent()
    // const mode = document.getElementById('theme-select_2').value;
    // localStorage.setItem('')
})

document.getElementById('resetAndExitBtn').addEventListener('click', () => {
    exitMenu = true
    pauseMenu.style.display = 'none'
    solveCube().then(() => {
        goToMainMenu();
    })
});

document.getElementById('resumeBtn').addEventListener('click', () => {
    togglePauseMenu(); // –∑–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
})

// –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–∞–ª–æ–∫
document.querySelectorAll('.close-btn').forEach(btn => {
    btn.addEventListener('click', hideModals);
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–∫–Ω–∞
window.addEventListener('click', (event) => {
    if ((event.target.classList.contains('modal') || event.target.classList.contains('modal_set')) && !event.target.closest('#pause-menu')) {
        hideModals();
    }
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
document.addEventListener('keydown', (event) => {
    if (event.key === 'Escape') {
        hideModals();
    } else if (event.code === 'KeyP'){
        console.log('–ø–æ–¥–º–µ–Ω—é')
        togglePauseMenu();
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–º–µ–Ω—é
export function togglePauseMenu(){
    const isPause = pauseMenu.style.display === 'block';
    pauseMenu.style.display = isPause ? 'none' : 'block';
    blurMenu.style.display = isPause ? 'none' : 'block';   
    if (!isPause){
        pauseStart = Date.now(); // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–∞—É–∑—ã
        stopTimer(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –ø–∞—É–∑–µ        
    } else {
        const pauseTime = Date.now() - pauseStart; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π –ø–∞—É–∑—ã
        pausedDuration += pauseTime; // –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—É–∑
        startGameTimer(true); // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –±–µ–∑ —Å–±—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏
    }
}

function formatTime(milliseconds) {
    const totalSeconds = Math.floor(milliseconds / 1000);
    const hours = String(Math.floor(totalSeconds / 3600)).padStart(2, '0');
    const minutes = String(Math.floor((totalSeconds % 3600) / 60)).padStart(2, '0');
    const seconds = String(totalSeconds % 60).padStart(2, '0');

    return `${hours}:${minutes}:${seconds}`;
}

// –¢–∞–π–º–µ—Ä –∏–≥—Ä—ã
function startGameTimer(resume = false) {
    if (timerInterval) clearInterval(timerInterval); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if (!resume){
        gameState.startTime = Date.now(); // –°–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –Ω–æ–≤–æ–π –∏–≥—Ä–µ
        pausedDuration = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é –ø–∞—É–∑—É
    }
    timerInterval = setInterval(() => {
        const elapsed = Date.now() - gameState.startTime - pausedDuration;
        document.getElementById('solveTime').textContent = formatTime(elapsed)
    }, 100);
}

export function stopTimer() {
    if (timerInterval) {
        clearInterval(timerInterval);
        timerInterval = null;
    }
}