index.js:
import * as THREE from 'https://unpkg.com/three@0.122.0/build/three.module.js';
import Stats from 'https://unpkg.com/three@0.122.0/examples/jsm/libs/stats.module.js';
import { OrbitControls } from 'https://unpkg.com/three@0.122.0/examples/jsm/controls/OrbitControls.js';
import { PointerLockControls } from 'https://unpkg.com/three@0.122.0/examples/jsm/controls/PointerLockControls.js';
import { initCube, world, bodies } from './cube.js';
import { initPlayer } from './player.js';
import { createTriggerZones } from './cubeInteraction.js';
import { rotateLayer, getCubesInLayer } from './cube.js';

export let scene, camera, controlsPointer, observerCamera, cameraPlayer, renderer, controls;
export let CurrentActiveCam = 'observer';
let stats;
let Planegeometry, Planematerial, PlaneCube;
export const Objects = [];
let textureLoader = new THREE.TextureLoader();
let texture_grass = textureLoader.load("https://threejs.org/examples/textures/terrain/grasslight-big.jpg");
const keys = {};
document.getElementById('menu_settings').style.display = 'none';

// Ошибки текстуры
texture_grass.onError = () => {
    console.warn('Не удалось загрузить текстуру травы');
    texture_grass = new THREE.MeshLambertMaterial({ color: 0x00aa00 });
};

// Создание HTML-элемента для отображения координат и поворота камеры
const cameraInfoDiv = document.createElement('div');
cameraInfoDiv.id = 'cameraInfo';
document.body.appendChild(cameraInfoDiv);

function initThree() {
    const width = window.innerWidth;
    const height = window.innerHeight;
    
    // Камеры
    observerCamera = new THREE.PerspectiveCamera(30, width / height, 0.5, 1000);
    cameraPlayer = new THREE.PerspectiveCamera(60, width / height, 0.5, 1000);
    observerCamera.name = 'observer';
    cameraPlayer.name = 'player';

    window.addEventListener('resize', () => {
        observerCamera.aspect = width / height;
        observerCamera.updateProjectionMatrix();
        cameraPlayer.aspect = width / height;
        cameraPlayer.updateProjectionMatrix();
        renderer.setSize(width, height);
    });

    camera = observerCamera;
    camera.position.set(18.74, 15.09, 18.81);

    camera.rotation.set(-0.349, 0.661, 0.457); // -20° по x, 37.85° по y, 26.21° по z
    
    scene = new THREE.Scene();
    scene.background = new THREE.Color(0x86ceeb);
    scene.fog = new THREE.Fog(0x000000, 500, 1000);
    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(scene.fog.color);
    renderer.outputEncoding = THREE.sRGBEncoding;
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;
    document.body.appendChild(renderer.domElement);

    controls = new OrbitControls(camera, renderer.domElement);
    controls.enabled = false
    controls.target.set(0, 5, 0);
    controls.rotateSpeed = 1.0;
    controls.zoomSpeed = 1.2;
    controls.enableDamping = true;
    controls.enablePan = false;
    controls.dampingFactor = 0.2;
    controls.minDistance = 10;
    controls.maxDistance = 300;

    controlsPointer = new PointerLockControls(cameraPlayer, renderer.domElement);
    scene.add(controlsPointer.getObject());

    controlsPointer.addEventListener('lock', () => {
        controls.enabled = false;
        camera = cameraPlayer;
        CurrentActiveCam = 'player';
        console.log('Камера: Игрок');
    });

    controlsPointer.addEventListener('unlock', () => {
        controls.enabled = true;
        camera = observerCamera;
        CurrentActiveCam = 'observer';
        console.log('Камера: Наблюдатель');
    });

    controls.update()

    stats = new Stats();
    document.body.appendChild(stats.dom);

    const ambientLight = new THREE.AmbientLight(0x666666);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 1.2);
    const distance = 20;
    directionalLight.position.set(-distance, distance, distance);
    directionalLight.castShadow = true;
    scene.add(directionalLight);

    const floorGeometry = new THREE.PlaneBufferGeometry(100, 100, 1, 1);
    floorGeometry.rotateX(-Math.PI / 2);
    const floorMaterial = new THREE.MeshLambertMaterial({ color: 0x777777, map: texture_grass });
    const floor = new THREE.Mesh(floorGeometry, floorMaterial);
    floor.translateY(-2.7);
    floor.receiveShadow = true;
    scene.add(floor);

    Planegeometry = new THREE.BoxGeometry(6.12, 6.12, 6.12);
    Planematerial = new THREE.MeshBasicMaterial({ color: 0xff0000, wireframe: true, transparent: true, opacity: 0 });
    PlaneCube = new THREE.Mesh(Planegeometry, Planematerial);
    PlaneCube.translateY(5);
    scene.add(PlaneCube);
}

document.addEventListener('keydown', (event) => {
    let off_on;
    if (event.code === 'KeyO') {
        if (controls.enabled) {
            controls.enabled = false;
            off_on = 'выкл';
        } else {
            controls.enabled = true;
            off_on = 'вкл';
        }
        document.getElementById('OrbitConSet').innerHTML = off_on;
    } else if (event.code === 'KeyR' && CurrentActiveCam === 'observer'){
        camera.position.set(18.74, 15.09, 18.81);
        camera.rotation.set(-0.4923, 0.7204, 0.3401); // -20° по x, 37.85° по y, 26.21° по z
        controls.update()
    }
    
});

function setupTriggerInteraction(triggerZones) {
    window.addEventListener('mousedown', (event) => {
        const mouse = new THREE.Vector2();
        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
        mouse.y = -((event.clientY / window.innerHeight) * 2 - 1);

        raycaster.setFromCamera(mouse, camera);
        const intersects = raycaster.intersectObjects(triggerZones, false);

        if (intersects.length > 0) {
            const { triggeredFace, layerIndex } = intersects[0].object.userData;

            let axis;
            switch (triggeredFace) {
                case 'right': axis = new THREE.Vector3(1, 0, 0); break;
                case 'left':  axis = new THREE.Vector3(-1, 0, 0); break;
                case 'up':    axis = new THREE.Vector3(0, 1, 0); break;
                case 'down':  axis = new THREE.Vector3(0, -1, 0); break;
                case 'front': axis = new THREE.Vector3(0, 0, 1); break;
                case 'back':  axis = new THREE.Vector3(0, 0, -1); break;
                default: return;
            }

            const coord = [2.04, 0, -2.04][layerIndex];
            const layerCubes = getCubesByAxisAndCoord(axis, coord);
            rotateLayerFromTrigger(layerCubes, axis);
        }
    });
}

export function getCurrentCam() {
    return camera;
}

function startworld() {
    requestAnimationFrame(startworld);
    try {
        world.step(1/60);
        bodies.forEach(({ mesh, body }) => {
            mesh.position.copy(body.position);
            mesh.quaternion.copy(body.quaternion);
        });

        // Обновление координат и поворота камеры
        const pos = camera.position;
        const rot = camera.rotation;
        const rotDeg = {
            x: (rot.x * 180 / Math.PI).toFixed(2),
            y: (rot.y * 180 / Math.PI).toFixed(2),
            z: (rot.z * 180 / Math.PI).toFixed(2)
        };
        cameraInfoDiv.innerHTML = `
            Camera: ${CurrentActiveCam}<br>
            Position: [${pos.x.toFixed(2)}, ${pos.y.toFixed(2)}, ${pos.z.toFixed(2)}]<br>
            Rotation: [${rotDeg.x}, ${rotDeg.y}, ${rotDeg.z}]°
        `;

        

        const deltaTime = 1/60;
        renderer.render(scene, camera);
        stats.update();
    } catch (err) {
        console.error('Ошибка в игровом цикле: ', err);
    }
}

window.addEventListener('load', () => {
    initThree();
    initCube(scene, world);
    initPlayer(scene, renderer, controls, controlsPointer);

    const triggerZones = createTriggerZones();
    triggerZones.forEach(zone => scene.add(zone));

    setupTriggerInteraction(triggerZones);

    startworld(world);
});
--------

cube.js：
import * as THREE from 'https://unpkg.com/three@0.122.0/build/three.module.js';
import * as CANNON from 'https://cdn.jsdelivr.net/npm/cannon-es@0.20.0/dist/cannon-es.js';
import { GLTFLoader } from 'https://cdn.jsdelivr.net/npm/three@0.122.0/examples/jsm/loaders/GLTFLoader.js';
import { camera, CurrentActiveCam } from './index.js';

let scene;
export let world;
let selectedObject = null;
let marker_on = false; // флаг маркера
const loaderGLTF = new GLTFLoader();
export const bodies = []; // массив для физических тел
const Objects = []; // одномерный массив с объектами
let raycaster = new THREE.Raycaster();
let rotationGroup = null;
let previousMousePosition = { x: 0, y: 0 };
let cubesToRotate = [];
let selectedNormal = null; // Нормаль выбранной грани для вращения
export let mouse = new THREE.Vector2();
const center = new THREE.Vector2(); // центр экрана 0, 0
let arrowHelper = null;
let progressArrows = []

export const originalMaterials = new Map();

const validGroups = [
    // R - RED - Красный
    'R1_GWR001', 'R2_WR002', 'R3_RWB003', 'R4_GR004', 
    'R5_CENTER_R005', 'R6_RB006', 'R7_GRY007', 'R8_RY008', 'R9_RBY009',
    // Mid - Middle - Средний
    'Mid1_GW001', 'Mid2_CENTER_W002', 'Mid3_WB003', 'Mid4_CENTER_G004',
    'Mid5_CENTER_B005', 'Mid6_CENTER_B006', 'Mid7_YG007', 'Mid8_CENTER_Y008', 'Mid9_YB009',
    // O - Orange - Оранжевый
    'O1_GOW001', 'O2_OW002', 'O3_OBW003', 'O4_GO004',
    'O5_CENTER_O005', 'O6_OB006', 'O7_GYO007', 'O8_YO008', 'O9_OYB009'
];

// для вращения
let isRotating = false;
let startMousePosition = new THREE.Vector2();
let rotationAxis = new THREE.Vector3();

// для обозначения выбраного кубика
let cursorSelected = document.createElement('div');
cursorSelected.id = 'selected-cursor';
document.body.appendChild(cursorSelected)

// функции событий
function handleGlobalMouse(event){
    console.log('hgMClick: ', event)    
    // блок контекс-меню для ПКМ и вызов общего отработчика
    if (event.button === 2) event.preventDefault();
    handleCubeClick(event);
}

let mouseHistory = [];
function handleGlobalMouseMove(event) {
    if (!isRotating || !rotationGroup) return;

    const currentMousePosition = new THREE.Vector2(event.clientX, event.clientY);

    // Сглаживание: храним последние 5 позиций мыши
    mouseHistory.push(currentMousePosition.clone());
    if (mouseHistory.length > 5) mouseHistory.shift();

    // Вычисляем среднюю позицию
    const avgMousePosition = new THREE.Vector2(0, 0);
    mouseHistory.forEach(pos => avgMousePosition.add(pos));
    avgMousePosition.divideScalar(mouseHistory.length);

    const delta = avgMousePosition.clone().sub(startMousePosition);

    // Порог для игнорирования мелких движений
    const movementThreshold = 3;
    if (delta.length() < movementThreshold) return;

    // Определяем доминирующую ось движения мыши
    const axisThreshold = 1.5;
    let dominantAxis = 'none';
    if (Math.abs(delta.x) > Math.abs(delta.y) * axisThreshold) {
        dominantAxis = 'x';
        delta.y = 0;
    } else if (Math.abs(delta.y) > Math.abs(delta.x) * axisThreshold) {
        dominantAxis = 'y';
        delta.x = 0;
    } else {
        return; // Игнорируем нечёткие движения
    }

    // Вычисляем угол вращения
    const rotationSpeed = 0.015;
    let rotationAngle = delta.length() * rotationSpeed;

    // Определяем направление движения мыши
    const mouseDir = delta.clone().normalize();

    // Получаем векторы направления камеры
    const cameraDir = new THREE.Vector3(0, 0, -1).applyQuaternion(camera.quaternion);
    const cameraUp = new THREE.Vector3(0, 1, 0).applyQuaternion(camera.quaternion);
    const cameraRight = new THREE.Vector3(1, 0, 0).applyQuaternion(camera.quaternion);

    // Определяем направление вращения
    let direction = 0;
    if (Math.abs(rotationAxis.x) > 0.9) {
        // Вращение по x (боковые слои, например, левая/правая грань)
        if (dominantAxis === 'y') {
            // Вертикальное движение: вращение вверх/вниз
            direction = -mouseDir.y * Math.sign(rotationAxis.x) * Math.sign(cameraRight.dot(new THREE.Vector3(1, 0, 0)));
        } else if (dominantAxis === 'x') {
            // Горизонтальное движение: вращение влево/вправо
            direction = mouseDir.x * Math.sign(rotationAxis.x) * Math.sign(cameraDir.dot(new THREE.Vector3(0, 0, -1)));
        }
    } else if (Math.abs(rotationAxis.y) > 0.9) {
        // Вращение по y (верх/низ)
        if (dominantAxis === 'x') {
            // Горизонтальное движение: вращение влево/вправо
            direction = mouseDir.x * Math.sign(rotationAxis.y) * Math.sign(cameraRight.dot(new THREE.Vector3(1, 0, 0)));
        } else if (dominantAxis === 'y') {
            // Вертикальное движение: вращение вверх/вниз
            direction = -mouseDir.y * Math.sign(rotationAxis.y) * Math.sign(cameraUp.dot(new THREE.Vector3(0, 1, 0)));
        }
    } else if (Math.abs(rotationAxis.z) > 0.9) {
        // Вращение по z (перед/зад)
        if (dominantAxis === 'x') {
            // Горизонтальное движение: вращение влево/вправо
            direction = -mouseDir.x * Math.sign(rotationAxis.z) * Math.sign(cameraUp.dot(new THREE.Vector3(0, 1, 0)));
        } else if (dominantAxis === 'y') {
            // Вертикальное движение: вращение вверх/вниз
            direction = mouseDir.y * Math.sign(rotationAxis.z) * Math.sign(cameraRight.dot(new THREE.Vector3(1, 0, 0)));
        }
    }

    rotationAngle *= Math.sign(direction);
    if (Math.abs(rotationAngle) < 0.001) return;

    // Применяем вращение
    rotationGroup.rotateOnAxis(rotationAxis, rotationAngle);

    // Обновляем стрелки прогресса
    if (typeof updateProgressArrows === 'function') {
        updateProgressArrows(rotationAngle);
    }

    // Обновляем начальную позицию
    startMousePosition.copy(avgMousePosition);

    // Отладка
    console.log(`Движение мыши: delta=${delta.x},${delta.y}, dominantAxis=${dominantAxis}, direction=${direction}, angle=${rotationAngle}, axis=${rotationAxis.toArray()}, degrees=${rotationAngle * 180 / Math.PI}`);
}

function updateProgressArrows(currentAngle) {
    // Удаляем старые стрелки
    progressArrows.forEach(arrow => scene.remove(arrow));
    progressArrows = [];

    // Вычисляем прогресс (0–1) до ближайшего угла 90°
    const targetAngle = Math.round(currentAngle / (Math.PI / 2)) * (Math.PI / 2);
    const progress = Math.min(Math.abs(currentAngle) / (Math.PI / 2), 1);

    // Определяем цвета
    const startColor = new THREE.Color(0xff0000); // Красный
    const endColor = new THREE.Color(0x00ff00);   // Зелёный
    const arrowColor = startColor.clone().lerp(endColor, progress);

    // Создаём две стрелки
    const arrowLength = 5 + progress * 2; // Длина от 1 до 3
    // Положительная стрелка
    const arrow1 = new THREE.ArrowHelper(
        rotationAxis,
        rotationGroup.position,
        arrowLength,
        arrowColor.getHex(),
        0.3,
        0.1
    );
    scene.add(arrow1);
    progressArrows.push(arrow1);

    // Отрицательная стрелка
    const arrow2 = new THREE.ArrowHelper(
        rotationAxis.clone().negate(),
        rotationGroup.position,
        arrowLength,
        arrowColor.getHex(),
        0.3,
        0.1
    );
    scene.add(arrow2);
    progressArrows.push(arrow2);
}

function handleGlobalMouseUp(event){
    if (!isRotating) return;
        
    // Вычисляем ближайший угол 90 градусов
    const currentAngle = rotationGroup.rotation.toVector3().dot(rotationAxis);
    const targetAngle = Math.round(currentAngle / (Math.PI/2)) * (Math.PI/2);
    
    // Анимация завершения вращения
    const duration = 300; // ms
    const startTime = performance.now();
    
    function animateCompletion(currentTime) {
        if (!rotationGroup) return;
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        const angle = currentAngle + (targetAngle - currentAngle) * progress;
        
        rotationGroup.rotation.set(0, 0, 0);
        rotationGroup.rotateOnAxis(rotationAxis, angle);
        
        if (progress < 1) {
            requestAnimationFrame(animateCompletion);
        } else {
            finishRotation();
        }
    }
    
    requestAnimationFrame(animateCompletion);
}

// события
window.addEventListener('mousedown', handleGlobalMouse)
window.addEventListener('mousemove', handleGlobalMouseMove);
window.addEventListener('mouseup',   handleGlobalMouseUp);
window.addEventListener('contextmenu', (event)=> event.preventDefault())

export function checkFpsHit(){
    if (CurrentActiveCam !== 'player') return null;
    raycaster.setFromCamera(center, camera);
    return raycaster.intersectObjects(Objects, true)[0] || null        
}

export function initCube(sceneArg, worldArg) {
    scene = sceneArg;
    world = worldArg;
    
    initCannon();

    loaderGLTF.load("models/Cubik-Rubik_LITE_without_camera.glb", (gltf) => {
        const model = gltf.scene;
        model.scale.set(1, 1, 1);
        scene.add(model);

        console.log('***Структура модели***')
        model.traverse(child => {
            if (child.isGroup || child.isMesh){
                const worldPos = new THREE.Vector3()
                child.getWorldPosition(worldPos);
                console.log(`Объект: ${child.name}, Тип: ${child.type}, Позиция: [${worldPos.x.toFixed(2)}, ${worldPos.y.toFixed(2)}, ${worldPos.z.toFixed(2)}]`);}
        })

        model.traverse(child => {
            if (child.isGroup && validGroups.includes(child.name)) {
                child.traverse(mesh => {
                    if (mesh.isMesh) {
                        // Глубокое клонирование материала
                        const clonedMaterial = mesh.material.clone();
                        // Сохраняем все важные свойства
                        if (mesh.material.emissive) {
                            clonedMaterial.emissive = mesh.material.emissive.clone();
                            clonedMaterial.emissiveIntensity = mesh.material.emissiveIntensity;
                        }
                        // Сохраняем текстуры
                        if (mesh.material.map) clonedMaterial.map = mesh.material.map;                   
                        originalMaterials.set(mesh.uuid, clonedMaterial);
                        // Настройка свойств меша
                        mesh.castShadow = true;
                        mesh.material.emissiveIntensity = 0;
                        mesh.geometry.computeVertexNormals()                        
                    }
                });
                Objects.push(child);
            }
        });

        // Физическое тело
        const body = new CANNON.Body({
            mass: 1,
            position: new CANNON.Vec3(0, 5, 0),
            shape: new CANNON.Box(new CANNON.Vec3(0.5, 0.5, 0.5))
        });
        world.addBody(body);
        bodies.push({ mesh: model, body });

    }, undefined, (error) => {
        console.error("Ошибка загрузки модели:", error);
    });
}

export function initCannon() {
    world = new CANNON.World();
    world.broadphase = new CANNON.NaiveBroadphase();
    world.solver.iterations = 10;
    const groundBody = new CANNON.Body({
        mass: 1,
        position: new CANNON.Vec3(0, 0, 0),
        shape: new CANNON.Plane(),
    });
    groundBody.quaternion.setFromEuler(-Math.PI / 2, 0, 0);
    world.addBody(groundBody);
}

// функция получения кубов в слое (Размер одного кубика = 1)
function getCubesInLayer(normal, clickedObject) {
    const layerCubes = [];
    const threshold = 0.9;

    const clickedPos = new THREE.Vector3();
    clickedObject.getWorldPosition(clickedPos);

    const axis = Math.abs(normal.x) > threshold ? 'x' :
                 Math.abs(normal.y) > threshold ? 'y' : 'z';
    
    // Определяем координату слоя
    let layerCoord = Math.round(clickedPos[axis]);
    
    // Собираем все кубики в слое
    Objects.forEach(cube => {
        const cubePos = new THREE.Vector3();
        cube.getWorldPosition(cubePos);
        if (Math.abs(cubePos[axis] - layerCoord) < 0.1){
            layerCubes.push(cube)
        }       
    });
    
    console.log(`Слой по оси: ${axis}, координата: ${layerCoord}, кубиков: ${layerCubes.length}`)
    return { cubes: layerCubes };
}

function handleCubeClick(event) {
    console.log('hCubeClick: ', 'isRotating: ' + isRotating, 'Objects.length: ' + Objects.length);
    if (!Objects.length) return;

    const isRotationAction = event.button === 0;

    // Устанавливаем мышь (mouse) в зависимости от камеры
    if (CurrentActiveCam === 'player') {
        mouse.copy(center);
    } else {
        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
        mouse.y = -((event.clientY / window.innerHeight) * 2 - 1);
    }
    console.log("Координаты мыши: ", mouse);

    raycaster.setFromCamera(mouse, camera);
    const intersects = raycaster.intersectObjects(Objects, true);

    if (intersects.length > 0) {
        const intersect = intersects[0];

        // Выделение/сброс выделения
        if (selectedObject) {
            selectedObject.material.emissive.setHex(0x000000);
            marker_on = false;
        }

        // Выделение нового объекта
        selectedObject = intersect.object;
        selectedObject.material.emissive.setHex(isRotationAction ? 0xff0000 : 0x0f00ff);
        marker_on = !isRotationAction;

        // Вращение слоя
        if (isRotationAction && intersect.face && intersect.face.normal) {
            console.log('Начинаем вращение. Нормаль: ', intersect.face.normal);
            // Преобразование локальной нормали в глобальную
            const localNormal = intersect.face.normal.clone();
            const worldNormal = localNormal.applyMatrix4(intersect.object.matrixWorld).normalize();

            // Позиция клика
            const clickedPos = intersect.point; // Используем точку пересечения

            // Определяем ось вращения на основе позиции клика
            let alignedNormal;
            let axis;
            let layerCoord;

            // Определяем, какой слой выбран
            if (Math.abs(clickedPos.y) > 0.9) {
                // Верхний или нижний слой (y = ±1)
                axis = new THREE.Vector3(0, Math.sign(clickedPos.y), 0); // [0, 1, 0] или [0, -1, 0]
                layerCoord = Math.round(clickedPos.y);
                alignedNormal = axis.clone();
            } else if (Math.abs(clickedPos.x) > 0.9) {
                // Боковой слой (x = ±1)
                axis = new THREE.Vector3(Math.sign(clickedPos.x), 0, 0); // [1, 0, 0] или [-1, 0, 0]
                layerCoord = Math.round(clickedPos.x);
                alignedNormal = axis.clone();
            } else if (Math.abs(clickedPos.z) > 0.9) {
                // Передний или задний слой (z = ±1)
                axis = new THREE.Vector3(0, 0, Math.sign(clickedPos.z)); // [0, 0, 1] или [0, 0, -1]
                layerCoord = Math.round(clickedPos.z);
                alignedNormal = axis.clone();
            } else {
                // Средний слой или неопределённый
                // Используем нормаль, если клик не на грани
                const absX = Math.abs(worldNormal.x);
                const absY = Math.abs(worldNormal.y);
                const absZ = Math.abs(worldNormal.z);
                alignedNormal = new THREE.Vector3(
                    absX > absY && absX > absZ ? Math.sign(worldNormal.x) : 0,
                    absY > absX && absY > absZ ? Math.sign(worldNormal.y) : 0,
                    absZ > absX && absZ > absY ? Math.sign(worldNormal.z) : 0
                ).normalize();
                axis = alignedNormal.clone();
                layerCoord = Math.round(clickedPos.x * axis.x + clickedPos.y * axis.y + clickedPos.z * axis.z);
            }

            console.log("Инфо", {
                "Глобальная нормаль: ": worldNormal.toArray(),
                "Выравненная нормаль: ": alignedNormal.toArray(),
                "Координаты нажатия: ": clickedPos.toArray(),
                "Ось вращения: ": axis.toArray(),
                "Координата слоя: ": layerCoord
            });

            startMousePosition.set(event.clientX, event.clientY);
            rotateLayer(intersect.object, axis);
        }
        if (isRotationAction) markerobject();
    } else {
        console.log("Пересечений с объектами не найдено");
    }
}

function markerobject() {
    if (selectedObject && selectedObject.material && selectedObject.material.emissive) {
        if (CurrentActiveCam === 'observer'){
            let PosCube = new THREE.Vector3();
            selectedObject.getWorldPosition(PosCube);

            // преобразуем мировые координаты в экранные
            PosCube.project(camera)

            // Переводим экранные координаты в пиксели
            const x = (PosCube.x * window.innerWidth) / 2 + window.innerWidth / 2;
            const y = -(PosCube.y * window.innerHeight) / 2 + window.innerHeight / 2;

            // Обновляем положение курсора
            cursorSelected.style.left = `${x}px`;
            cursorSelected.style.top  = `${y+50}px`;
            cursorSelected.style.display = 'block';
            
            if (marker_on) {
                requestAnimationFrame(markerobject);
            }
        }
    }
}

function rotateLayer(object, normal) {
    if (isRotating || !object.parent) return;
    console.log('Вращение🔃: ', {
        object: object.name,
        normal: { x: normal.x, y: normal.y, z: normal.z },
        camMode: CurrentActiveCam,
        CubesInLayer: cubesToRotate.length
    });

    const layerData = getCubesInLayer(normal, object);
    cubesToRotate = layerData.cubes;

    if (cubesToRotate.length === 0) return;

    // Удаляем предыдущий arrowHelper, если он есть
    if (arrowHelper) {
        scene.remove(arrowHelper);
        arrowHelper = null;
    }

    // Удаляем предыдущие стрелки прогресса
    progressArrows.forEach(arrow => scene.remove(arrow));
    progressArrows = [];

    // Создаём группу для вращения
    rotationGroup = new THREE.Group();
    const centerPoint = new THREE.Vector3();

    cubesToRotate.forEach(cube => {
        const pos = new THREE.Vector3();
        cube.getWorldPosition(pos);
        centerPoint.add(pos);
    });
    centerPoint.divideScalar(cubesToRotate.length);

    rotationGroup.position.copy(centerPoint);
    scene.add(rotationGroup);

    cubesToRotate.forEach(cube => {
        const pos = new THREE.Vector3();
        cube.getWorldPosition(pos);
        cube.position.copy(pos.sub(centerPoint));
        scene.remove(cube);
        rotationGroup.add(cube);
    });

    rotationAxis.copy(normal).normalize();
    isRotating = true;

    // Создаём начальные стрелки прогресса
    updateProgressArrows(0);

    // Создаём новый arrowHelper
    arrowHelper = new THREE.ArrowHelper(
        rotationAxis,
        rotationGroup.position,
        2,
        0xff0000
    );
    scene.add(arrowHelper);
}

// Измените функцию finishRotation
function finishRotation() {
    if (!rotationGroup) return;

    cubesToRotate.forEach(cube => {
        cube.traverse(child => {
            if (child.isMesh && originalMaterials.has(child.uuid)) {
                // Восстанавливаем материал из хранилища
                child.material = originalMaterials.get(child.uuid).clone();
                
                // Обновляем свойства
                child.material.needsUpdate = true;
                child.geometry.computeVertexNormals();
                
                // Для материалов с эмиссией
                if (child.material.emissive) {
                    child.material.emissiveIntensity = 0.5; // Значение по умолчанию
                }
            }
        });
    });

    const tempContainer = new THREE.Group();
    scene.add(tempContainer);
    tempContainer.position.copy(rotationGroup.position);
    tempContainer.quaternion.copy(rotationGroup.quaternion);

    while (rotationGroup.children.length > 0) {
        const cube = rotationGroup.children[0];
        const originalPos = new THREE.Vector3().copy(cube.position);

        rotationGroup.remove(cube);
        tempContainer.add(cube);
        cube.position.copy(originalPos);
    }

    while (tempContainer.children.length > 0) {
        const cube = tempContainer.children[0];
        const worldPos = new THREE.Vector3();
        cube.getWorldPosition(worldPos);
        const worldQuater = cube.getWorldQuaternion(new THREE.Quaternion())

        // Округляем позиции и кватернионы
        worldPos.x = Math.round(worldPos.x * 1000) / 1000;
        worldPos.y = Math.round(worldPos.y * 1000) / 1000;
        worldPos.z = Math.round(worldPos.z * 1000) / 1000;
        worldQuater.x = Math.round(worldQuater.x * 1000) / 1000
        worldQuater.y = Math.round(worldQuater.y * 1000) / 1000
        worldQuater.z = Math.round(worldQuater.z * 1000) / 1000
        worldQuater.w = Math.round(worldQuater.w * 1000) / 1000

        tempContainer.remove(cube);
        scene.attach(cube);
        cube.position.copy(worldPos);
        cube.quaternion.copy(worldQuater);
    }

    scene.remove(tempContainer);
    if (arrowHelper) {
        scene.remove(arrowHelper);
        arrowHelper = null;
    }
    // Удаляем стрелки прогресса
    progressArrows.forEach(arrow => scene.remove(arrow));
    progressArrows = [];
    scene.remove(rotationGroup);
    isRotating = false;
    cubesToRotate = [];
    rotationGroup = null;
}
------------

player.js
import * as THREE from 'https://unpkg.com/three@0.122.0/build/three.module.js';
import { GLTFLoader } from 'https://cdn.jsdelivr.net/npm/three@0.122.0/examples/jsm/loaders/GLTFLoader.js';
import { cameraPlayer } from './index.js';
import { checkFpsHit } from './cube.js';

let playerModel = null;
let playerSpeed = 0.35;
let currentCam;
let controlsPointerRef;
let orbitControlsRef;
let rendererRef
let zoomEnable = false;
let arrayKeys = ['F12']
let mouse = new THREE.Vector2();

let fpsCursor ;
let isCursorVisible = true;

export function initPlayer(sceneArg, renderer, orbitControls, controlsPointer) {
    controlsPointerRef = controlsPointer;
    orbitControlsRef = orbitControls;
    rendererRef = renderer;

    fpsCursor = document.createElement('div');
    fpsCursor.id = 'fps-cursor';
    document.body.appendChild(fpsCursor);

    const playerLoader = new GLTFLoader();
    playerLoader.load("/models/player_texture.glb", function (gltf) {
        playerModel = gltf.scene;
        playerModel.scale.set(1, 1, 1);
        playerModel.position.set(10, -1.5, 0);
        playerModel.rotateY(1.489);
        sceneArg.add(playerModel);
              
        cameraPlayer.position.set(0, 0.8, 0);
        cameraPlayer.lookAt(new THREE.Vector3(0, 0.8, 0));
        cameraPlayer.rotation.order = 'YXZ';
        playerModel.add(cameraPlayer);
        

        // Проверяем наличие orbitControls перед использованием
        if (!orbitControlsRef) {
            console.error("OrbitControls not initialized!");
            return;
        }

        setupCameraControl(cameraPlayer, controlsPointerRef);
        window.addEventListener('keydown', handlePlayerMovement);
        updateCursor();
    }, undefined, function (error){
        console.error('Ошибка загрузки модели игрока: ', error);
    });
}

function setupCameraControl(cameraPlayer, controlsPointer) {
    controlsPointer.addEventListener('lock', () => {
        if (orbitControlsRef) orbitControlsRef.enabled = false;
        zoomEnable = true;
        currentCam = cameraPlayer;
        fpsCursor.style.display = 'block'
        document.getElementById('selected-cursor').style.display = 'none'
    });

    controlsPointer.addEventListener('unlock', () => {
        if (orbitControlsRef) orbitControlsRef.enabled = true;
        zoomEnable = false;
        currentCam = orbitControlsRef.object; // Используем камеру OrbitControls
        fpsCursor.style.display = 'none'
    });

    // Устанавливаем начальную камеру
    currentCam = orbitControlsRef ? orbitControlsRef.object : cameraPlayer;
}

function handlePlayerMovement(event) {
    if (event.code !== arrayKeys[0]){console.log('HandPlaMov: '+ event.code)}
    if (!controlsPointerRef) return;
    
    switch (event.code) {
        case 'KeyW':
            controlsPointerRef.moveForward(playerSpeed);
            break;
        case 'KeyS':
            controlsPointerRef.moveForward(-playerSpeed);
            break;
        case 'KeyD':
            controlsPointerRef.moveRight(playerSpeed);
            break;
        case 'KeyA':
            controlsPointerRef.moveRight(-playerSpeed);
            break;
        case 'KeyF':
            toggleCam();
            break;
    }
}

function toggleCam() {
    if (!controlsPointerRef || !orbitControlsRef) return;
    
    if (document.pointerLockElement === rendererRef.domElement) {
        controlsPointerRef.unlock();
        document.getElementById('menu_settings').style.display = 'none'
    } else {
        controlsPointerRef.lock();
        document.getElementById('menu_settings').style.display = 'block'
    }
}

function zoomWheel(event){
    if (!zoomEnable) return;
    const delta = event.deltaY * 0.1; // наименьший множитель для плавности
    currentCam.fov = THREE.MathUtils.clamp(currentCam.fov + delta,
        30, // мин
        75, // макс   
    );
    document.getElementById("CurntCamFOV").innerHTML = currentCam.fov;
    currentCam.updateProjectionMatrix();
}

window.addEventListener('wheel', zoomWheel, {passive: false})


function updateCam(){
    if (!controlsPointerRef) return;

    if (fpsCursor && isCursorVisible){
        fpsCursor.style.left = `${mouse.x * 0.5 * window.innerWidth + window.innerWidth/2}px`;
        fpsCursor.style.top = `${-mouse.y * 0.5 * window.innerHeight + window.innerHeight/2}px`;
    }5

    currentCam = (document.pointerLockElement === rendererRef.domElement)
    ? cameraPlayer : orbitControlsRef.object
     
    requestAnimationFrame(updateCam)
}

function updateCursor(){
    //console.log('UC: '+!fpsCursor)
    if (!fpsCursor) return null;

    const hit = checkFpsHit()
    if (hit)
    { /*цвет попадания*/ fpsCursor.classList.add('highlight');} 
    else 
    { /*Обычный цвет*/ fpsCursor.classList.remove('highlight'); }
    requestAnimationFrame(updateCursor);
}

updateCam();
--------------

cubeInteraction.js:
// CubeInteraction.js
import * as THREE from 'https://unpkg.com/three@0.122.0/build/three.module.js';

/**
 * Создает невидимые триггерные зоны вокруг кубика для определения вращений по свайпу на ребрах.
 * @param {number} cubeSize Размер кубика (теперь 6.12).
 * @returns {THREE.Mesh[]} Массив мешей триггерных зон.
 */
export function createTriggerZones(cubeSize = 5.7) { // Устанавливаем размер по умолчанию 6.12
    const zones = [];
    const halfSize = cubeSize / 2; // Половина размера кубика (3.06)
    const smallCubeSize = cubeSize / 3; // Размер маленького кубика (2.04)

    // Позиции центров слоев вдоль каждой оси
    // Для кубика 3x3x3 размером 6.12, центрированного в (0,0,0)
    const layerPositions = [smallCubeSize, 0, -smallCubeSize]; // [2.04, 0, -2.04]

    // Размеры зоны. Можно сделать их немного больше размера грани маленького кубика.
    const zoneSize = smallCubeSize * 0.5; // Размер зоны вдоль ребра и перпендикулярно внутрь (например, 2.04 * 1.1 = ~2.24)
    const zoneThickness = smallCubeSize * 0.1; // Толщина зоны (насколько она выступает наружу) (например, 2.04 * 0.1 = ~0.2)
    const outwardOffset = zoneThickness / 2; // Смещение от грани/ребра наружу (равно половине толщины зоны)

    // Материал для зон (делаем его невидимым в финальной версии)
    const zoneMaterial = new THREE.MeshBasicMaterial({
        color: 0x00ffff, // Цвет для отладки (бирюзовый)
        wireframe: true, // Показываем каркас для отладки
        transparent: true,
        opacity: 0.5, // Делаем полупрозрачным для отладки
        visible: true // Установите true для отладки, false для продакшена
    });

    // Определяем ребра и связанные с ними свойства
    // Для каждого ребра:
    // - fixedCoords: координаты, которые остаются постоянными на этом ребре (будут +/- halfSize)
    // - edgeAxis: ось, вдоль которой идет ребро ('x', 'y', или 'z')
    // - outwardDir: вектор, указывающий наружу от центра кубика через это ребро
    // - triggeredFace: грань, вращение которой запускается этим ребром (по свайпу в направлении outwardDir)
    const edges = [
        // Ребра вдоль оси Y (фиксированные X, Z) - запускают вращение R/L (вокруг X)
        { fixedX: halfSize, fixedZ: halfSize, edgeAxis: 'y', outwardDir: new THREE.Vector3(1, 0, 1), triggeredFace: 'right' }, // F-R (стрелки +X -> R)
        { fixedX: halfSize, fixedZ: -halfSize, edgeAxis: 'y', outwardDir: new THREE.Vector3(1, 0, -1), triggeredFace: 'right' }, // B-R (стрелки +X -> R)
        { fixedX: -halfSize, fixedZ: halfSize, edgeAxis: 'y', outwardDir: new THREE.Vector3(-1, 0, 1), triggeredFace: 'left' }, // F-L (стрелки -X -> L)
        { fixedX: -halfSize, fixedZ: -halfSize, edgeAxis: 'y', outwardDir: new THREE.Vector3(-1, 0, -1), triggeredFace: 'left' }, // B-L (стрелки -X -> L)

        // Ребра вдоль оси X (фиксированные Y, Z) - запускают вращение U/D (вокруг Y)
        { fixedY: halfSize, fixedZ: halfSize, edgeAxis: 'x', outwardDir: new THREE.Vector3(0, 1, 1), triggeredFace: 'up' }, // F-T (стрелки +Y -> U)
        { fixedY: -halfSize, fixedZ: halfSize, edgeAxis: 'x', outwardDir: new THREE.Vector3(0, -1, 1), triggeredFace: 'down' }, // F-Btm (стрелки -Y -> D)
        { fixedY: halfSize, fixedZ: -halfSize, edgeAxis: 'x', outwardDir: new THREE.Vector3(0, 1, -1), triggeredFace: 'up' }, // B-T (стрелки +Y -> U)
        { fixedY: -halfSize, fixedZ: -halfSize, edgeAxis: 'x', outwardDir: new THREE.Vector3(0, -1, -1), triggeredFace: 'down' }, // B-Btm (стрелки -Y -> D)

        // Ребра вдоль оси Z (фиксированные X, Y) - запускают вращение R/L (вокруг X) по изображению
        { fixedX: halfSize, fixedY: halfSize, edgeAxis: 'z', outwardDir: new THREE.Vector3(1, 1, 0), triggeredFace: 'right' }, // T-R (стрелки +X -> R)
        { fixedX: -halfSize, fixedY: halfSize, edgeAxis: 'z', outwardDir: new THREE.Vector3(-1, 1, 0), triggeredFace: 'left' }, // T-L (стрелки -X -> L)
        { fixedX: halfSize, fixedY: -halfSize, edgeAxis: 'z', outwardDir: new THREE.Vector3(1, -1, 0), triggeredFace: 'right' }, // Btm-R (стрелки +X -> R)
        { fixedX: -halfSize, fixedY: -halfSize, edgeAxis: 'z', outwardDir: new THREE.Vector3(-1, -1, 0), triggeredFace: 'left' }, // Btm-L (стрелки -X -> L)
    ];

    // Геометрия зоны (ширина, высота, глубина).
    // Ширина и высота примерно равны зоне вдоль ребра, глубина - толщина.
    const zoneGeometry = new THREE.BoxGeometry(zoneSize, zoneSize, zoneThickness); // width, height, depth

    edges.forEach(edge => {
        const outwardVector = edge.outwardDir.clone().normalize(); // Нормализованный вектор наружу

        layerPositions.forEach((layerPos, index) => { // Используем новые layerPositions
            const zone = new THREE.Mesh(zoneGeometry, zoneMaterial);
            
            const yOffset = 5;
            // Вычисляем позицию зоны
            const position = new THREE.Vector3();
            if (edge.edgeAxis === 'y') {
                position.set(edge.fixedX, layerPos + yOffset, edge.fixedZ);
            } else if (edge.edgeAxis === 'x') {
                position.set(layerPos, edge.fixedY + yOffset, edge.fixedZ);
            } else if (edge.edgeAxis === 'z') {
                position.set(edge.fixedX, edge.fixedY + yOffset, layerPos);
            }

            // Добавляем смещение наружу
            position.add(outwardVector.clone().multiplyScalar(zoneThickness / 2 + outwardOffset));

            zone.position.copy(position);

            // Ориентируем зону вдоль outwardVector, сохраняя прямоугольную форму
            zone.lookAt(zone.position.clone().add(outwardVector));
            zone.rotateOnAxis(new THREE.Vector3(0, 1, 0), Math.PI); // Корректируем ориентацию

            // Добавляем пользовательские данные для идентификации зоны
            zone.userData = {
                isTriggerZone: true,
                triggeredFace: edge.triggeredFace, // 'right', 'left', 'up', 'down', 'front', 'back'
                layerIndex: index, // 0, 1, 2 (соответствует layerPositions [2.04, 0, -2.04])
            };

            zones.push(zone);
        });
    });

    return zones;
}