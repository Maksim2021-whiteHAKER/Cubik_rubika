index.js
import * as THREE from 'https://unpkg.com/three@0.122.0/build/three.module.js';
import Stats from 'https://unpkg.com/three@0.122.0/examples/jsm/libs/stats.module.js';
import { OrbitControls } from 'https://unpkg.com/three@0.122.0/examples/jsm/controls/OrbitControls.js';
import { PointerLockControls } from 'https://unpkg.com/three@0.122.0/examples/jsm/controls/PointerLockControls.js';
import { GLTFLoader } from 'https://cdn.jsdelivr.net/npm/three@0.122.0/examples/jsm/loaders/GLTFLoader.js';
import { initCube, world, bodies} from './cube.js';
import { initPlayer } from './player.js';

export let scene, camera, controlsPointer, observerCamera, cameraPlayer, renderer, controls
export let CurrentActiveCam = 'observer'
let stats
let Planegeometry, Planematerial, PlaneCube;
let selectedface = null;
let selectedObject = null;
let flash_speed = 2; // скорость мигания
let emissiveMin = 0; // минимальная интенсивность
let emissiveMax = 1; // максимальная интенсивность
let flash_on = false; // флаг мерцания
const loaderGLTF = new GLTFLoader();
//const bodies = []; // массив для физических тел
const objects = []; // двумерный массив
export const Objects = []; // одномерный массив с объектами
let raycaster = new THREE.Raycaster();
let rotationGroup = [];
let isDragging = false;
let previousMousePosition = { x: 0, y: 0 };
let cubesToRotate = [];
let selectedNormal = null; // Нормаль выбранной грани для вращения
let mouse = new THREE.Vector2();
let textureLoader = new THREE.TextureLoader();
let texture_grass = textureLoader.load("https://threejs.org/examples/textures/terrain/grasslight-big.jpg");
let scale = 1;
let MouseXplayer = 0;
let MouseYplayer = 0;
let playerModel; // Модель игрока
let playerSpeed = 0.35; // Скорость движения игрока
const keys = {}; // Состояние клавиш
document.getElementById('menu_settings').style.display = 'none'

// ошибки
texture_grass.onError = () =>{
    console.warn('не удалось загрузить текстуру травы')
    texture_grass = new THREE.MeshLambertMaterial({color: 0x00aa00})
}

function initThree(){
    const width = window.innerWidth;
    const height = window.innerHeight;
    // КАМЕРА НАБЛЮДАТЕЛЯ И ИГРОКА
    observerCamera = new THREE.PerspectiveCamera(30, width / height, 0.5, 1000);
    cameraPlayer = new THREE.PerspectiveCamera(60, width / height, 0.5, 1000);

    observerCamera.name = 'observer'; // Наблюдатель
    cameraPlayer.name = 'player';     // Игрок

    window.addEventListener('resize', ()=>{
    
        observerCamera.aspect = width/height;
        observerCamera.updateProjectionMatrix();
    
        cameraPlayer.aspect = width/height;
        cameraPlayer.updateProjectionMatrix();
    
        renderer.setSize(width, height)
    })

   // Камера
    camera = observerCamera;
    camera.position.set(0, 30, 50);
    camera.lookAt(0, 0, 0);

    scene = new THREE.Scene();
    scene.background = new THREE.Color(0x86ceeb);
    scene.fog = new THREE.Fog(0x000000, 500, 1000);
    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(scene.fog.color);
    renderer.outputEncoding = THREE.sRGBEncoding;
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;
    document.body.appendChild(renderer.domElement);

    controls = new OrbitControls(camera, renderer.domElement);
    controls.target.set(0, 5, 0);
    controls.rotateSpeed = 1.0;
    controls.zoomSpeed = 1.2;
    controls.enableDamping = true;
    controls.enablePan = false;
    controls.dampingFactor = 0.2;
    controls.minDistance = 10;
    controls.maxDistance = 500;
    camera.rotation.set(-0.40, 0, 0);

    // захват точки(курсора)
    controlsPointer = new PointerLockControls(cameraPlayer, renderer.domElement);
    scene.add(controlsPointer.getObject());

    controlsPointer.addEventListener('lock', ()=>{
        controls.enabled = false;
        camera = cameraPlayer
        CurrentActiveCam = 'player';
        console.log('Камера: Игрок');
    })

    controlsPointer.addEventListener('unlock', ()=>{
        controls.enabled = true;
        camera = observerCamera
        CurrentActiveCam = 'observer';
        console.log('Камера: Наблюдатель')
    })
    
    stats = new Stats();
    document.body.appendChild(stats.dom);

    const ambientLight = new THREE.AmbientLight(0x666666);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 1.2);
    const distance = 20;
    directionalLight.position.set(-distance, distance, distance);
    directionalLight.castShadow = true;
    scene.add(directionalLight);

    const floorGeometry = new THREE.PlaneBufferGeometry(100, 100, 1, 1);
    floorGeometry.rotateX(-Math.PI / 2);
    const floorMaterial = new THREE.MeshLambertMaterial({ color: 0x777777, map: texture_grass });
    const floor = new THREE.Mesh(floorGeometry, floorMaterial);
    floor.translateY(-2.7);
    floor.receiveShadow = true;
    scene.add(floor);

    Planegeometry = new THREE.BoxGeometry(10,10,10);
    Planematerial = new THREE.MeshBasicMaterial({ color: 0xff0000, wireframe: true, transparent: true, opacity: 0 });
    PlaneCube = new THREE.Mesh(Planegeometry, Planematerial);
    PlaneCube.translateY(5);
    scene.add(PlaneCube); 
}

document.addEventListener('keydown', (event)=>{
    let off_on;
    if (event.code === 'KeyO' ){
      if (controls.enabled){
        controls.enabled = false;
        off_on = 'выключено';
      } else {controls.enabled = true; off_on = 'включено'}
      document.getElementById('OrbitConSet').innerHTML = off_on
    }  

})

export function getCurrentCam(){
    return currentCamera;
}

function startworld(){
    requestAnimationFrame(startworld);
    try {
        world.step(1/60);
        bodies.forEach(({mesh, body}) => {
            mesh.position.copy(body.position);
            mesh.quaternion.copy(body.quaternion); 
        });
        const deltaTime = 1/60
        renderer.render(scene, camera);
        stats.update();
    } catch (err) {
        console.error('Ошибка в игровом цикле: ', err)
    }
}

window.addEventListener('load', () => {
    initThree();
    initCube(scene, renderer, controls, controlsPointer, camera, world);
    initPlayer(scene, renderer, controls, controlsPointer);
    startworld(world);
})
cube.js：
import * as THREE from 'https://unpkg.com/three@0.122.0/build/three.module.js';
import * as CANNON from 'https://cdn.jsdelivr.net/npm/cannon-es@0.20.0/dist/cannon-es.js';
import { GLTFLoader } from 'https://cdn.jsdelivr.net/npm/three@0.122.0/examples/jsm/loaders/GLTFLoader.js';
import { camera, controls, CurrentActiveCam } from './index.js';

let scene;
export let world;
let selectedface = null;
let selectedObject = null;
let marker_on = false; // флаг маркера
const loaderGLTF = new GLTFLoader();
export const bodies = []; // массив для физических тел
const objects = []; // двумерный массив
const Objects = []; // одномерный массив с объектами
let raycaster = new THREE.Raycaster();
let rotationGroup = [];
let isDragging = false;
let previousMousePosition = { x: 0, y: 0 };
let cubesToRotate = [];
let selectedNormal = null; // Нормаль выбранной грани для вращения
export let mouse = new THREE.Vector2();
const center = new THREE.Vector2(); // центр экрана 0, 0
let arrowHelper = null;

export const originalMaterials = new Map();

const validGroups = [
    // R - RED - Красный
    'R1_GWR001', 'R2_WR002', 'R3_RWB003', 'R4_GR004', 
    'R5_CENTER_R005', 'R6_RB006', 'R7_GRY007', 'R8_RY008', 'R9_RBY009',
    // Mid - Middle - Средний
    'Mid1_GW001', 'Mid2_CENTER_W002', 'Mid3_WB003', 'Mid4_CENTER_G004',
    'Mid5_CENTER_B005', 'Mid6_CENTER_B006', 'Mid7_YG007', 'Mid8_CENTER_Y008', 'Mid9_YB009',
    // O - Orange - Оранжевый
    'O1_GOW001', 'O2_OW002', 'O3_OBW003', 'O4_GO004',
    'O5_CENTER_O005', 'O6_OB006', 'O7_GYO007', 'O8_YO008', 'O9_OYB009'
];

// для вращения
let isRotating = false;
let startMousePosition = new THREE.Vector2();
let rotationAxis = new THREE.Vector3();
let threerotationGroup = new THREE.Group();

// для обозначения выбраного кубика
let cursorSelected = document.createElement('div');
cursorSelected.id = 'selected-cursor';
document.body.appendChild(cursorSelected)

// функции событий
function handleGlobalMouse(event){
    console.log('hgMClick: ', event)
    // обработка только ПКМ и ЛКМ
    
    // блок контекс-меню для ПКМ
    if (event.button === 2) event.preventDefault();

    // вызов общего отработчика
    handleCubeClick(event);
}

// Измените функцию handleGlobalMouseMove
function handleGlobalMouseMove(event) {
    if (!isRotating || !rotationGroup) return;
        
    const currentMousePosition = new THREE.Vector2(
        (event.clientX / window.innerWidth) * 2 - 1,
        -(event.clientY / window.innerHeight) * 2 + 1
    );
    
    const delta = currentMousePosition.clone().sub(startMousePosition);
    const rotationAngle = delta.length() * Math.PI;
    
    if (rotationAngle > 0) {
        rotationGroup.rotation.set(0, 0, 0);
        rotationGroup.rotateOnAxis(rotationAxis, delta.x > 0 ? rotationAngle : -rotationAngle);
    }   
}

function handleGlobalMouseUp(event){
    if (!isRotating) return;
        
    // Вычисляем ближайший угол 90 градусов
    const angle = rotationGroup.rotation.toVector3().dot(rotationAxis);
    const targetAngle = Math.round(angle / (Math.PI/2)) * (Math.PI/2);
    const deltaAngle = targetAngle - angle;
    
    // Анимация завершения вращения
    const duration = 300; // ms
    const startTime = performance.now();
    
    function animateCompletion(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        const currentDelta = deltaAngle * progress;
        
        rotationGroup.rotation.set(0, 0, 0);
        rotationGroup.rotateOnAxis(rotationAxis, angle + currentDelta);
        
        if (progress < 1) {
            requestAnimationFrame(animateCompletion);
        } else {
            finishRotation();
        }
    }
    
    requestAnimationFrame(animateCompletion);
}

// события
window.addEventListener('mousedown', handleGlobalMouse)
window.addEventListener('mousemove', handleGlobalMouseMove);
window.addEventListener('mouseup',   handleGlobalMouseUp);
window.addEventListener('contextmenu', (event)=> event.preventDefault())

export function checkFpsHit(){
    if (CurrentActiveCam !== 'player') return null;
    raycaster.setFromCamera(center, camera);
    return raycaster.intersectObjects(Objects, true)[0] || null        
}

export function initCube(sceneArg, worldArg) {
    scene = sceneArg;
    world = worldArg;
    
    initCannon();

    loaderGLTF.load("models/Cubik-Rubik_LITE_without_camera.glb", (gltf) => {
        const model = gltf.scene;
        model.scale.set(1, 1, 1);
        scene.add(model);

        model.traverse(child => {
            if (child.isGroup && validGroups.includes(child.name)) {
                child.traverse(mesh => {
                    if (mesh.isMesh) {
                        // Глубокое клонирование материала
                        const clonedMaterial = mesh.material.clone();
                        
                        // Сохраняем все важные свойства
                        if (mesh.material.emissive) {
                            clonedMaterial.emissive = mesh.material.emissive.clone();
                            clonedMaterial.emissiveIntensity = mesh.material.emissiveIntensity;
                        }
                        
                        // Сохраняем текстуры
                        if (mesh.material.map) clonedMaterial.map = mesh.material.map;
                        
                        originalMaterials.set(mesh.uuid, clonedMaterial);

                        // Настройка свойств меша
                        mesh.castShadow = true;
                        mesh.material.emissiveIntensity = 0;
                    }
                });
                Objects.push(child);
            }
        });

        // Физическое тело
        const body = new CANNON.Body({
            mass: 1,
            position: new CANNON.Vec3(0, 5, 0),
            shape: new CANNON.Box(new CANNON.Vec3(0.5, 0.5, 0.5))
        });
        world.addBody(body);
        bodies.push({ mesh: model, body });

    }, undefined, (error) => {
        console.error("Ошибка загрузки модели:", error);
    });
}

export function initCannon() {
    world = new CANNON.World();
    world.broadphase = new CANNON.NaiveBroadphase();
    world.solver.iterations = 10;
    const groundBody = new CANNON.Body({
        mass: 1,
        position: new CANNON.Vec3(0, 0, 0),
        shape: new CANNON.Plane(),
    });
    groundBody.quaternion.setFromEuler(-Math.PI / 2, 0, 0);
    world.addBody(groundBody);
}

// функция получения кубов в слое (Размер одного кубика = 1)
function getCubesInLayer(normal, clickedObject) {
    const layerCubes = [];
    const threshold = 0.9;
    
    const clickedPos = new THREE.Vector3();
    clickedObject.getWorldPosition(clickedPos);

    const axis = Math.abs(normal.x) > threshold ? 'x' :
                 Math.abs(normal.y) > threshold ? 'y' : 'z';
    
    // Определяем координату слоя
    let layerCoord = Math.round(clickedPos[axis]);
    
    // Собираем все кубики в слое
    Objects.forEach(cube => {
        const cubePos = new THREE.Vector3();
        cube.getWorldPosition(cubePos);

        if (Math.round(cubePos[axis]) === layerCoord){
            layerCubes.push(cube)
        }       
     
    });
    
    return { cubes: layerCubes };
}

function handleCubeClick(event){
    console.log('hCubeClick: ', 'isRotating: '+isRotating,'Objects.length: '+Objects.length)
    if (!Objects.length) return;

    const isRotationAction = event.button === 0

    // устанавливаем мышь(mouse) в зависимости от камеры
    if (CurrentActiveCam === 'player'){
        mouse.copy(center)
    } else {
        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
        mouse.y = -((event.clientY / window.innerHeight) * 2 - 1);
    }

    raycaster.setFromCamera(mouse, camera);   
    const intersects = raycaster.intersectObjects(Objects, true);

    if (intersects.length > 0) {
        const intersect = intersects[0];

        // выделение/сброс выделения
        if (selectedObject) {
            selectedObject.material.emissive.setHex(0x000000);
            marker_on = false;
        }
        
        // выделение нового объекта
        selectedObject = intersect.object;
        selectedObject.material.emissive.setHex(isRotationAction ? 0xff0000 : 0x0f00ff);
        marker_on = !isRotationAction;

        // вращение слоя 
        console.log('проверка на истиность: ',isRotationAction && intersect.face && intersect.face.normal)
        if (isRotationAction && intersect.face && intersect.face.normal) {
            console.log('Начинаем вращение. Нормаль: ', intersect.face.normal)
            startMousePosition.set(event.clientX, event.clientY)
            rotateLayer(intersect.object, intersect.face.normal);
        }
        
        if (isRotationAction) markerobject();
    }
}

function markerobject() {
    if (selectedObject && selectedObject.material && selectedObject.material.emissive) {
        if (CurrentActiveCam === 'observer'){
            let PosCube = new THREE.Vector3();
            selectedObject.getWorldPosition(PosCube);

            // преобразуем мировые координаты в экранные
            PosCube.project(camera)

            // Переводим экранные координаты в пиксели
            const x = (PosCube.x * window.innerWidth) / 2 + window.innerWidth / 2;
            const y = -(PosCube.y * window.innerHeight) / 2 + window.innerHeight / 2;

            // Обновляем положение курсора
            cursorSelected.style.left = `${x}px`;
            cursorSelected.style.top  = `${y+50}px`;
            cursorSelected.style.display = 'block';
            
            if (marker_on) {
                requestAnimationFrame(markerobject);
            }
        }
    }
}

function rotateLayer(object, normal) {
    if (isRotating || !object.parent) return;
    console.log('Вращение🔃: ', {
        object: object.name,
        normal: {x: normal.x, y: normal.y, z: normal.z},
        camMode: CurrentActiveCam
    });
    
    const layerData = getCubesInLayer(normal, object);
    cubesToRotate = layerData.cubes;
    
    if (cubesToRotate.length === 0) return;
    
    // Удаляем предыдущий arrowHelper, если он есть
    if (arrowHelper) {
        scene.remove(arrowHelper);
        arrowHelper = null;
    }
    
    // Создаем группу для вращения
    rotationGroup = new THREE.Group();
    const centerPoint = new THREE.Vector3();
    
    cubesToRotate.forEach(cube => {
        const pos = new THREE.Vector3();
        cube.getWorldPosition(pos);
        centerPoint.add(pos);
    });
    centerPoint.divideScalar(cubesToRotate.length);
    
    rotationGroup.position.copy(centerPoint);
    scene.add(rotationGroup);
    
    cubesToRotate.forEach(cube => {
        const pos = new THREE.Vector3();
        cube.getWorldPosition(pos);
        cube.position.copy(pos.sub(centerPoint));
        scene.remove(cube);
        rotationGroup.add(cube);
    });
    
    rotationAxis.copy(normal).normalize();
    isRotating = true;

    // Создаем новый arrowHelper
    arrowHelper = new THREE.ArrowHelper(
        rotationAxis,
        rotationGroup.position, 
        2, 0xff0000
    );
    scene.add(arrowHelper);
}

// Измените функцию finishRotation
function finishRotation() {
    if (!rotationGroup) return;

    cubesToRotate.forEach(cube => {
        cube.traverse(child => {
            if (child.isMesh && originalMaterials.has(child.uuid)) {
                // Восстанавливаем материал из хранилища
                child.material = originalMaterials.get(child.uuid).clone();
                
                // Обновляем свойства
                child.material.needsUpdate = true;
                child.geometry.computeVertexNormals();
                
                // Для материалов с эмиссией
                if (child.material.emissive) {
                    child.material.emissiveIntensity = 0.5; // Значение по умолчанию
                }
            }
        });
    });

    const tempContainer = new THREE.Group();
    scene.add(tempContainer);
    tempContainer.position.copy(rotationGroup.position);
    tempContainer.quaternion.copy(rotationGroup.quaternion);

    while (rotationGroup.children.length > 0) {
        const cube = rotationGroup.children[0];
        const originalPos = new THREE.Vector3().copy(cube.position);

        rotationGroup.remove(cube);
        tempContainer.add(cube);
        cube.position.copy(originalPos);
    }

    while (tempContainer.children.length > 0) {
        const cube = tempContainer.children[0];
        const worldPos = new THREE.Vector3();
        cube.getWorldPosition(worldPos);

        tempContainer.remove(cube);
        scene.attach(cube);
        cube.position.copy(worldPos);
        cube.quaternion.copy(tempContainer.quaternion);
    }

    scene.remove(tempContainer);
    if (arrowHelper) {
        scene.remove(arrowHelper);
        arrowHelper = null;
    }
    scene.remove(rotationGroup);
    isRotating = false;
    cubesToRotate = [];
    rotationGroup = null;
}
------------
player.js
import * as THREE from 'https://unpkg.com/three@0.122.0/build/three.module.js';
import { GLTFLoader } from 'https://cdn.jsdelivr.net/npm/three@0.122.0/examples/jsm/loaders/GLTFLoader.js';
import { cameraPlayer } from './index.js';
import { checkFpsHit } from './cube.js';

let playerModel = null;
let playerSpeed = 0.35;
let currentCam;
let controlsPointerRef;
let orbitControlsRef;
let rendererRef
let zoomEnable = false;
let arrayKeys = ['F12']
let mouse = new THREE.Vector2();

let fpsCursor ;
let isCursorVisible = true;

export function initPlayer(sceneArg, renderer, orbitControls, controlsPointer) {
    controlsPointerRef = controlsPointer;
    orbitControlsRef = orbitControls;
    rendererRef = renderer;

    fpsCursor = document.createElement('div');
    fpsCursor.id = 'fps-cursor';
    document.body.appendChild(fpsCursor);

    const playerLoader = new GLTFLoader();
    playerLoader.load("/models/player_texture.glb", function (gltf) {
        playerModel = gltf.scene;
        playerModel.scale.set(1, 1, 1);
        playerModel.position.set(10, -1.5, 0);
        playerModel.rotateY(1.489);
        sceneArg.add(playerModel);
              
        cameraPlayer.position.set(0, 0.8, 0);
        cameraPlayer.lookAt(new THREE.Vector3(0, 0.8, 0));
        cameraPlayer.rotation.order = 'YXZ';
        playerModel.add(cameraPlayer);
        

        // Проверяем наличие orbitControls перед использованием
        if (!orbitControlsRef) {
            console.error("OrbitControls not initialized!");
            return;
        }

        setupCameraControl(cameraPlayer, controlsPointerRef);
        window.addEventListener('keydown', handlePlayerMovement);
        updateCursor();
    }, undefined, function (error){
        console.error('Ошибка загрузки модели игрока: ', error);
    });
}

function setupCameraControl(cameraPlayer, controlsPointer) {
    controlsPointer.addEventListener('lock', () => {
        if (orbitControlsRef) orbitControlsRef.enabled = false;
        zoomEnable = true;
        currentCam = cameraPlayer;
        fpsCursor.style.display = 'block'
        document.getElementById('selected-cursor').style.display = 'none'
    });

    controlsPointer.addEventListener('unlock', () => {
        if (orbitControlsRef) orbitControlsRef.enabled = true;
        zoomEnable = false;
        currentCam = orbitControlsRef.object; // Используем камеру OrbitControls
        fpsCursor.style.display = 'none'
    });

    // Устанавливаем начальную камеру
    currentCam = orbitControlsRef ? orbitControlsRef.object : cameraPlayer;
}

function handlePlayerMovement(event) {
    if (event.code !== arrayKeys[0]){console.log('HandPlaMov: '+ event.code)}
    if (!controlsPointerRef) return;
    
    switch (event.code) {
        case 'KeyW':
            controlsPointerRef.moveForward(playerSpeed);
            break;
        case 'KeyS':
            controlsPointerRef.moveForward(-playerSpeed);
            break;
        case 'KeyD':
            controlsPointerRef.moveRight(playerSpeed);
            break;
        case 'KeyA':
            controlsPointerRef.moveRight(-playerSpeed);
            break;
        case 'KeyF':
            toggleCam();
            break;
    }
}

function toggleCam() {
    if (!controlsPointerRef || !orbitControlsRef) return;
    
    if (document.pointerLockElement === rendererRef.domElement) {
        controlsPointerRef.unlock();
        document.getElementById('menu_settings').style.display = 'none'
    } else {
        controlsPointerRef.lock();
        document.getElementById('menu_settings').style.display = 'block'
    }
}

function zoomWheel(event){
    if (!zoomEnable) return;
    const delta = event.deltaY * 0.1; // наименьший множитель для плавности
    currentCam.fov = THREE.MathUtils.clamp(currentCam.fov + delta,
        30, // мин
        75, // макс   
    );
    document.getElementById("CurntCamFOV").innerHTML = currentCam.fov;
    currentCam.updateProjectionMatrix();
}

window.addEventListener('wheel', zoomWheel, {passive: false})


function updateCam(){
    if (!controlsPointerRef) return;

    if (fpsCursor && isCursorVisible){
        fpsCursor.style.left = `${mouse.x * 0.5 * window.innerWidth + window.innerWidth/2}px`;
        fpsCursor.style.top = `${-mouse.y * 0.5 * window.innerHeight + window.innerHeight/2}px`;
    }5

    currentCam = (document.pointerLockElement === rendererRef.domElement)
    ? cameraPlayer : orbitControlsRef.object
     
    requestAnimationFrame(updateCam)
}

function updateCursor(){
    //console.log('UC: '+!fpsCursor)
    if (!fpsCursor) return null;

    const hit = checkFpsHit()
    if (hit)
    { /*цвет попадания*/ fpsCursor.classList.add('highlight');} 
    else 
    { /*Обычный цвет*/ fpsCursor.classList.remove('highlight'); }
    requestAnimationFrame(updateCursor);
}

updateCam();
script.js
import * as THREE from 'https://unpkg.com/three@0.122.0/build/three.module.js';
import Stats from 'https://unpkg.com/three@0.122.0/examples/jsm/libs/stats.module.js';
import * as CANNON from 'https://cdn.jsdelivr.net/npm/cannon-es@0.20.0/dist/cannon-es.js';
import { OrbitControls } from 'https://unpkg.com/three@0.122.0/examples/jsm/controls/OrbitControls.js';
import { PointerLockControls } from 'https://unpkg.com/three@0.122.0/examples/jsm/controls/PointerLockControls.js';
import { GLTFLoader } from 'https://cdn.jsdelivr.net/npm/three@0.122.0/examples/jsm/loaders/GLTFLoader.js';

let controls, controlsPointer, camera, renderer, stats, scene, world;
let Planegeometry, Planematerial, PlaneCube;
let selectedface = null;
let selectedObject = null;
let flash_speed = 2; // скорость мигания
let emissiveMin = 0; // минимальная интенсивность
let emissiveMax = 1; // максимальная интенсивность
let flash_on = false; // флаг мерцания
const loaderGLTF = new GLTFLoader();
const bodies = []; // массив для физических тел
const objects = []; // двумерный массив
const Objects = []; // одномерный массив с объектами
let raycaster = new THREE.Raycaster();
let rotationGroup = [];
let isDragging = false;
let previousMousePosition = { x: 0, y: 0 };
let cubesToRotate = [];
let selectedNormal = null; // Нормаль выбранной грани для вращения
let mouse = new THREE.Vector2();
let textureLoader = new THREE.TextureLoader();
let texture_grass = textureLoader.load("https://threejs.org/examples/textures/terrain/grasslight-big.jpg");
let observerCamera = new THREE.PerspectiveCamera(30, window.innerWidth/window.innerHeight, 0.5, 1000);
let scale = 1
let MouseXplayer = 0
let MouseYplayer = 0
let cameraPlayer = new THREE.PerspectiveCamera(30, window.innerWidth/window.innerHeight, 0.5, 1000);
let playerModel; // Модель игрока
let playerSpeed = 0.35; // Скорость движения игрока
let playerDirection = new THREE.Vector3(); // Направление движения
const keys = {}; // Состояние клавиш

initThree();
initCannon();
startworld();

function initThree() {

    // Камера
    camera = observerCamera;

    camera.position.set(0, 30, 50);
    camera.lookAt(0, 0, 0);

    cameraPlayer.position.set(0, 1.6, 0)
    cameraPlayer.lookAt(playerDirection(0, 1.6, 0))
    cameraPlayer.rotation.order = 'YXZ'

    scene = new THREE.Scene();
    scene.background = new THREE.Color(0x86ceeb);
    scene.fog = new THREE.Fog(0x000000, 500, 1000);

    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(scene.fog.color);
    renderer.outputEncoding = THREE.sRGBEncoding;
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;
    document.body.appendChild(renderer.domElement);

    controls = new OrbitControls(camera, renderer.domElement);
    controls.target.set(0,5,0);
    controls.rotateSpeed = 1.0;
    controls.zoomSpeed = 1.2;
    controls.enableDamping = true;
    controls.enablePan = false;
    controls.dampingFactor = 0.2;
    controls.minDistance = 10;
    controls.maxDistance = 500;
    camera.rotation.set(-0.40, 0, 0);

    // захват точки(курсора)
    controlsPointer = new PointerLockControls(cameraPlayer, renderer.domElement)
    scene.add(controlsPointer.getObject())
    

    controlsPointer.addEventListener('lock', ()=>{
        controls.enabled = false;
        camera = cameraPlayer;
    })

    controlsPointer.addEventListener('unlock', ()=>{
        controls.enabled = true;
        camera = observerCamera;
    })

    stats = new Stats();
    document.body.appendChild(stats.dom);

    const ambientLight = new THREE.AmbientLight(0x666666);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 1.2);
    const distance = 20;
    directionalLight.position.set(-distance, distance, distance);
    directionalLight.castShadow = true;
    scene.add(directionalLight);

    const floorGeometry = new THREE.PlaneBufferGeometry(100, 100, 1, 1);
    floorGeometry.rotateX(-Math.PI / 2);
    const floorMaterial = new THREE.MeshLambertMaterial({ color: 0x777777, map: texture_grass });
    const floor = new THREE.Mesh(floorGeometry, floorMaterial);
    floor.translateY(-2.7);
    floor.receiveShadow = true;
    scene.add(floor);

    Planegeometry = new THREE.BoxGeometry(13, 13, 13);
    Planematerial = new THREE.MeshBasicMaterial({ color: 0xff0000, wireframe: true });
    PlaneCube = new THREE.Mesh(Planegeometry, Planematerial);
    PlaneCube.translateY(5);
    scene.add(PlaneCube);

    loaderGLTF.load("models/Cubik-Rubik_LITE_without_camera.glb", function (gltf) {
        const model = gltf.scene;
        model.scale.set(1, 1, 1);
        scene.add(model);
        objects.push(model.children);
        for (const object of objects.flat()) {
            Objects.push(object);
            rotationGroup.push(object);
        }

        const shape = new CANNON.Box(new CANNON.Vec3(0.5, 0.5, 0.5));
        const body = new CANNON.Body({
            mass: 1,
            position: new CANNON.Vec3(0, 5, 0),
            shape: shape,
        });
        world.addBody(body);
        bodies.push({ mesh: model, body: body });

        // Загружаем модель игрока
        const playerLoader = new GLTFLoader();
        playerLoader.load("/models/player_texture.glb", function (gltf) {
            playerModel = gltf.scene;
            playerModel.scale.set(1,1,1); // Уменьшаем масштаб модели
            playerModel.position.set(10, -1.5, 0); // Позиция игрока
            playerModel.rotateY(1.489)
            scene.add(playerModel);
            controlsPointer.getObject().position.set(0,1,0);
            playerModel.add(controlsPointer.getObject());
        });
    });

    window.addEventListener('click', OnClickMouse, false);
}

function initCannon() {
    world = new CANNON.World();
    world.broadphase = new CANNON.NaiveBroadphase();
    world.solver.iterations = 10;

    const groundBody = new CANNON.Body({
        mass: 0,
        position: new CANNON.Vec3(0, 0, 0),
        shape: new CANNON.Plane(),
    });
    groundBody.quaternion.setFromEuler(-Math.PI / 2, 0, 0);
    world.addBody(groundBody);
}

function rotateLayer(object, normal) {
    const layerData = getCubesInLayer(normal, object);
    cubesToRotate = layerData.cubes;
    rotationGroup = layerData.group;
    selectedNormal = normal;
    isDragging = true;
}

function getCubesInLayer(normal, clickedObject) {
    const layerCubes = [];
    const threshold = 0.9;
    const cubesize = 1;

    if (Math.abs(normal.x) > threshold) {
        const xLayer = Math.round(clickedObject.position.x / cubesize);
        Objects.forEach(cube => {
            if (Math.round(cube.position.x / cubesize) === xLayer) {
                layerCubes.push(cube);
            }
        });
    } else if (Math.abs(normal.y) > threshold) {
        const yLayer = Math.round(clickedObject.position.y / cubesize);
        Objects.forEach(cube => {
            if (Math.round(cube.position.y / cubesize) === yLayer) {
                layerCubes.push(cube);
            }
        });
    } else if (Math.abs(normal.z) > threshold) {
        const zLayer = Math.round(clickedObject.position.z / cubesize);
        Objects.forEach(cube => {
            if (Math.round(cube.position.z / cubesize) === zLayer) {
                layerCubes.push(cube);
            }
        });
    }
    const layerGroup = new THREE.Group();
    layerCubes.forEach(cube => {
        layerGroup.add(cube.clone());
    });
    return { cubes: layerCubes, group: layerGroup };
}

function OnClickMouse(event) {
    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
    mouse.y = -((event.clientY / window.innerHeight) * 2 - 1);
    raycaster.setFromCamera(mouse, camera);
    const intersect = raycaster.intersectObjects(Objects, true);

    if (intersect.length > 0) {
        const intersectObject = intersect[0].object;
        if (selectedObject) {
            selectedObject.material.emissive.setHex(0x000000);
            flash_on = false;
            selectedObject.material.emissiveIntensity = 0;
        }
        selectedObject = intersectObject;
        selectedObject.material.emissive.setHex(0x0f00ff);
        flash_on = true;
        flashobject();
        if (intersect[0].face) {
            const normal = intersect[0].face.normal;
            rotateLayer();
        }
    }
}

function flashobject() {
    if (selectedObject && selectedObject.material && selectedObject.material.emissive) {
        const time = performance.now() * 0.001;
        const emissiveIntensity = emissiveMin + (Math.sin(time * flash_speed) + 1) / 2 * (emissiveMax - emissiveMin);
        selectedObject.material.emissiveIntensity = emissiveIntensity;
        if (flash_on) {
            requestAnimationFrame(flashobject);
        }
    }
}

window.addEventListener('mousemove', function(event) {
    if (camera === cameraPlayer){
        //cameraPlayer.position.y = 1
        //cameraPlayer.position.z = 2
        cameraPlayer.position.order = 'YXZ'

        MouseXplayer = -(event.clientX / renderer.domElement.clientWidth) * 2 + 1
        MouseYplayer = -(event.clientY / renderer.domElement.clientHeight) * 2 + 1

        cameraPlayer.rotation.x = MouseXplayer / scale;
        cameraPlayer.rotation.y = MouseYplayer / scale;    
    }


    if (isDragging && rotationGroup) {
        const deltaMove = {
            x: event.clientX - previousMousePosition.x,
            y: event.clientY - previousMousePosition.y,
        };
        const rotationSpeed = 0.01;
        let axis = new THREE.Vector3();
        if (Math.abs(selectedNormal.x) > 0.9) {
            axis.set(1, 0, 0);
        } else if (Math.abs(selectedNormal.y) > 0.9) {
            axis.set(0, 1, 0);
        } else if (Math.abs(selectedNormal.z) > 0.9) {
            axis.set(0, 0, 1);
        }
        rotationGroup.rotateOnAxis(axis, deltaMove.x * rotationSpeed);
    }
    previousMousePosition = { x: event.clientX, y: event.clientY };
});

window.addEventListener('mouseup', function() {
    isDragging = false;
    cubesToRotate = [];
    selectedNormal = null;
    rotationGroup = null;
});

function toggleCam(){
    if (camera === observerCamera){
        controlsPointer.lock();
        document.body.style.cursor = 'default';

    } else {
        controlsPointer.unlock();
        document.body.style.cursor = 'default';

    }
}

window.addEventListener('wheel', (event) => {
    if (camera === cameraPlayer) { // Проверка активной камеры
        const delta = event.deltaY * 0.25; // Дельта изменения
        cameraPlayer.fov = Math.max(1, Math.min(70, cameraPlayer.fov + delta));
        cameraPlayer.updateProjectionMatrix(); // Обновляем матрицу
    }
});

window.addEventListener('keydown', (event) => {
    console.log('event: '+event.code)
    switch (event.code){
        case 'KeyF':
            toggleCam();
            break;
        case 'KeyW':
            let playerPosW = controlsPointer.moveForward(playerSpeed);           
            break;
        case 'KeyS':
            let playerPosS = controlsPointer.moveForward(-playerSpeed)
            break;
        case 'KeyD':
            let playerPosD = controlsPointer.moveRight(playerSpeed);
            break;
        case 'KeyA':
            let playerPosA = controlsPointer.moveRight(-playerSpeed)
            break;
    }
})


function startworld() {
    requestAnimationFrame(startworld);
    world.step(1 / 60);

    bodies.forEach(({ mesh, body }) => {
        mesh.position.copy(body.position);
        mesh.quaternion.copy(body.quaternion);
    });

    const deltaTime = 1 / 60;

    renderer.render(scene, camera);
    stats.update();
}